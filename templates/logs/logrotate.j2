#
# Onionspray log rotation config
#
# Copyright (C) 2025 The Tor Project, Inc.
# SPDX-License-Identifier: AGPL-3.0-or-later
#
# Adapted from https://gitlab.com/guardianproject-ops/terraform-aws-onionspray/-/blob/main/templates/cron
#
# Generated by Ansible:
# https://gitlab.torproject.org/tpo/onion-services/ansible/onionspray-role
#

# Main logs
{{ onionspray_path }}/log/*.log {
  su {{ onionspray_user }} {{ onionspray_user }}
  create 644 {{ onionspray_user }} {{ onionspray_user }}
  {{ onionspray_main_log_rotation_frequency }}
  dateext
  rotate {{ onionspray_main_log_rotation_rotations }}
  missingok
  ifempty
  compress
}

# Onionbalance logs
{{ onionspray_path }}/onionbalance/*.log {
  su {{ onionspray_user }} {{ onionspray_user }}
  create 644 {{ onionspray_user }} {{ onionspray_user }}
  {{ onionspray_main_log_rotation_frequency }}
  dateext
  rotate {{ onionspray_main_log_rotation_rotations }}
  missingok
  ifempty
  compress
  lastaction
    {{ onionspray_path }}/onionspray ob-reload -a
  endscript
}
{% for project in onionspray_projects %}
{% if project.log_rotation | default(true) %}

# Project logs for {{ project.name }}
{{ onionspray_path }}/projects/{{ project.name }}/log/*.log {
  su {{ onionspray_user }} {{ onionspray_user }}
  create 644 {{ onionspray_user }} {{ onionspray_user }}
  {{ project.log_rotation_frequency | default('hourly') }}
  dateext
  rotate {{ project.log_rotations | default('1344') }}
  missingok
  ifempty
  compress
  lastaction
    {% if project.log_s3_upload is defined and project.log_s3_upload -%}
    {% set ec2_endpoint = project.log_s3_upload_ec2_api | default('http://169.254.169.254/latest/') -%}
    {% set s3_endpoint = project.log_s3_endpoint | default('https://s3.amazonaws.com') -%}
    {% set s3_uri = project.log_s3_uri | default("s3://$BUCKET_NAME/" ~ ansible_facts.nodename ~ "/") -%}
    # Run once after all files are rotated
    ROTATED_DIR="$(dirname "$1")"
    INCLUDE_PATTERN="nginx-access*.log-*.gz"
    BUCKET_NAME="{{ project.log_s3_bucket_name | default('') }}"
    SYNC_LOG="{{ onionspray_path }}/projects/{{ project.name }}/log/s3-sync.log"

    # AWS CLI configuration
    export AWS_ENDPOINT_URL="{{ s3_endpoint }}"
    export AWS_ACCESS_KEY_ID="{{ project.log_s3_access_key_id | default('') }}"
    export AWS_SECRET_ACCESS_KEY="{{ project.log_s3_access_key | default('') }}"
    export AWS_REGION="{{ project.log_s3_region | default('us-east-1') }}"

    {% if project.log_s3_ec2 | default(false) +%}
    # Fetch S3 params from AWS EC2 API
    # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html
    export TOKEN=`/usr/bin/curl --silent --request PUT "{{ ec2_endpoint.rstrip('/') }}/api/token" --header "X-aws-ec2-metadata-token-ttl-seconds: 60"`
    export AWS_REGION=`/usr/bin/curl --silent --header "X-aws-ec2-metadata-token: $TOKEN" "{{ ec2_endpoint.rstrip('/') }}/dynamic/instance-identity/document" | grep region | cut -d\" -f4`
    export INSTANCE_ID=`/usr/bin/curl --silent --header "X-aws-ec2-metadata-token: $TOKEN" "{{ ec2_endpoint.rstrip('/') }}/dynamic/instance-identity/document" | grep instanceId | cut -d\" -f4`
    {% endif %}

    # Ensure the S3 sync log exists
    touch $SYNC_LOG
    chown {{ onionspray_user }}: $SYNC_LOG

    {% if onionspray_aws_cli_from_snap -%}
    # Sync logs to S3 bucket using the official Snap package
    /snap/bin/aws s3 sync "$ROTATED_DIR/" "{{ s3_uri }}" --exclude "*" --include "$INCLUDE_PATTERN" 2>&1 >> $SYNC_LOG
    {%+ else -%}
    # Sync logs to S3 bucket
    #/usr/bin/aws s3 sync "$ROTATED_DIR/" "s3://$BUCKET_NAME/$INSTANCE_ID/" --exclude "*" --include "$INCLUDE_PATTERN" 2>&1 >> $SYNC_LOG

    # Sync logs to S3 bucket, silent version
    /usr/bin/aws s3 sync "$ROTATED_DIR/" "{{ s3_uri }}" --exclude "*" --include "$INCLUDE_PATTERN" --quiet 2>&1 >> $SYNC_LOG
    {% endif -%}
    {%- endif %}

    # Reload Onionspray
    #{{ onionspray_path }}/onionspray --local nxreload -a
    #{{ onionspray_path }}/onionspray --local torreload -a
    {{ onionspray_path }}/onionspray --local nxreload {{ project.name }}
    {{ onionspray_path }}/onionspray --local torreload {{ project.name }}
  endscript
}
{% endif %}
{% endfor %}
