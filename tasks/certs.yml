---
#
# Certificate handling
#
# Copyright (C) 2024 The Tor Project, Inc.
# SPDX-License-Identifier: AGPL-3.0-or-later
#

- name: certs | Certificate configuration
  tags:
    - certificates
  block:
    - name: certs | Check if CA certificate file exists
      ansible.builtin.stat:
        path: "{{ onionspray_ca_file }}"
      register: _ca_file
      when: onionspray_check_cert_with_ca_file

    - name: certs | Abort if CA certificate file is absent
      ansible.builtin.fail:
        msg: |
          No file present at path '{{ onionspray_ca_file }}'.
          This file should contain the CA certificate(s) used to check if the TLS certificate of the proxied domain is valid.
          On Debian-like systems, you can install the 'ca-certificates' package to create the CA file used by default.
          Otherwise, change the 'onionspray_ca_file' variable to the path of CA certificate(s) you want to use.
          You can also disable this check (not recommended) by setting 'onionspray_check_cert_with_ca_file' to 'false'.
      when:
        - onionspray_check_cert_with_ca_file
        - not _ca_file.stat.exists

    - name: certs | Generate self-signed certificate script
      ansible.builtin.template:
        src: make-selfsigned-wildcard-ssl-cert.sh.j2
        dest: "{{ onionspray_repo_download_path }}/lib/make-selfsigned-wildcard-ssl-cert.sh"
        owner: "{{ onionspray_user }}"
        group: "{{ onionspray_user }}"
        mode: "700"
      notify:
        - Remove Onionspray generated settings config files
        - Remove Onionspray generated project directories
        - Generate Onionspray configs
        - Restart Onionspray

    - name: certs | Create the project certs folder
      ansible.builtin.file:
        path    : "{{ onionspray_repo_download_path }}/projects/{{ settings.project_name }}/ssl"
        owner   : "{{ onionspray_user }}"
        group   : "{{ onionspray_user }}"
        state   : directory
        mode    : '0700'
        recurse : false

- name: certs | Copy Onion Service certificates
  tags:
    - certificates
  when:
    - settings.certificates is defined
  block:
    - name: certs | Copy Onion TLS certificate
      ansible.builtin.copy:
        content: "{{ tls.public_key }}"
        dest: "{{ onionspray_repo_download_path }}/projects/{{ settings.project_name }}/ssl/{ tls.tor_addr | truncate(20, True, '')-v3.cert"
        owner: "{{ onionspray_user }}"
        group: "{{ onionspray_user }}"
        mode: "600"
      no_log: true
      loop: "{{ settings.certificates }}"
      loop_control:
        loop_var: tls
        label: tls.tor_address
      when:
        - tls.certificate is defined
        - tls.secret_key is defined
        - tls.tor_address is defined

    - name: certs | Copy Onion TLS secret key
      ansible.builtin.copy:
        content: "{{ tls.secret_key }}"
        dest: "{{ onionspray_repo_download_path }}/projects/{{ settings.project_name }}/ssl/{ tls.tor_addr | truncate(20, True, '')-v3.pem"
        owner: "{{ onionspray_user }}"
        group: "{{ onionspray_user }}"
        mode: "600"
      no_log: true
      loop: "{{ settings.certificates }}"
      loop_control:
        loop_var: tls
        label: tls.tor_address
      when:
        - tls.certificate is defined
        - tls.secret_key is defined
        - tls.tor_address is defined

# FIXME: this comes from an internal Onionspray role, and still needs to be ported
- name: certs | Upload Onion Service certificates
  tags:
    - certificates
  when:
    - settings.certificates is defined
  block:
    #- name: certs | Debug onionspray cert uploader command line invocation
    #  ansible.builtin.debug:
    #    msg: >
    #      {{ onionspray_cert_uploader_script }} {{ onionspray_provider }} {{ inventory_hostname }}
    #      {{ settings.project_name }} {{ onionspray_site.onion }} {{ onionspray_site.upstream }} {{ onionspray_user }}
    #      {{ onionspray_repo_download_path }}
    #  loop: "{{ settings.hardmaps }}"
    #  loop_control:
    #    loop_var : onionspray_site
    #    label    : "{{ onionspray_site.onion }}"
    #  when: onionspray_cert_uploader_script | length != 0

    #- name: certs | Ensure certificate file existence and permissions
    #  ansible.builtin.file:
    #    path  : "{{ onionspray_repo_download_path }}/projects/{{ settings.project_name }}/ssl/{{ onionspray_site.onion|truncate(20, True, '') }}-v3.cert"
    #    owner : "{{ onionspray_user }}"
    #    group : "{{ onionspray_user }}"
    #    state : touch
    #    mode  : '0600'
    #  loop_control:
    #    loop_var : onionspray_site
    #    label    : "{{ onionspray_site.onion }}"

    #- name: certs | Ensure the TLS private key file existence and permissions
    #  ansible.builtin.file:
    #    path  : "{{ onionspray_repo_download_path }}/projects/{{ settings.project_name }}/ssl/{{ site.onion|truncate(20, True, '') }}-v3.pem"
    #    owner : "{{ onionspray_user }}"
    #    group : "{{ onionspray_user }}"
    #    state : touch
    #    mode  : '0600'
    #  loop_control:
    #    loop_var : onionspray_site
    #    label    : "{{ onionspray_site.onion }}"

    - name: certs | Upload Onion Service certs for hardmaps
      ansible.builtin.command:
        cmd: >
          {{ onionspray_cert_uploader_script }} {{ onionspray_provider }} {{ inventory_hostname }}
          {{ settings.project_name }} {{ onionspray_site.tor_address }} {{ onionspray_site.proxied_domain }} {{ onionspray_user }}
          {{ onionspray_repo_download_path }}
      delegate_to  : localhost
      connection   : local
      become       : true
      become_user  : "{{ lookup('env', 'USER') }}"
      loop         : "{{ settings.hardmaps }}"
      loop_control :
        loop_var : onionspray_site
        label    : "{{ onionspray_site.onion }}"
      when:
        - onionspray_cert_uploader_script | length != 0
        - 'hardmaps' in onionspray_project
      notify : Restart Onionspray

      # This task always change something (even if only the mtime of a file)
      changed_when: true

      # Under normal circumstances, this is equivalent to "changed_when: true", with the difference
      # that may pass idempotence tests
      #register: onionspray_upload_certs_hardmaps
      #changed_when: onionspray_upload_certs_harmaps.rc != 0

    - name: certs | Upload Onion Service certs for softmaps
      ansible.builtin.command:
        cmd: >
          {{ onionspray_cert_uploader_script }} {{ onionspray_provider }} {{ inventory_hostname }}
          {{ settings.project_name }} {{ onionspray_site.tor_address }} {{ onionspray_site.proxied_domain }} {{ onionspray_user }}
          {{ onionspray_repo_download_path }}
      delegate_to  : localhost
      connection   : local
      become       : true
      become_user  : "{{ lookup('env', 'USER') }}"
      loop         : "{{ settings.softmaps }}"
      loop_control :
        loop_var : onionspray_site
        label    : "{{ onionspray_site.onion }}"
      when   :
        - onionspray_cert_uploader_script | length != 0
        - 'softmaps' in onionspray_project
      notify : Restart Onionspray

      # This task always change something (even if only the mtime of a file)
      changed_when: true

      # Under normal circumstances, this is equivalent to "changed_when: true", with the difference
      # that may pass idempotence tests
      #register: onionspray_upload_certs_softmaps
      #changed_when: onionspray_upload_certs_harmaps.rc != 0
